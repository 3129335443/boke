vue的使用
# 全局安装 vue-cli
$ npm install --global vue-cli
# 创建一个基于 webpack 模板的新项目
$ vue init webpack my-project
# 安装依赖，走你
$ cd my-project
$ npm install
$ npm run dev


npm run build



下载(npm install vue或者去vue官网)
引入vue.js

html：

<div id="app">						<!--挂载点，即vuejs解析的区域-->

	{{message}}					<!--绑定数据到view的方式-->
	
	<input type="text" v-model="message"/>		<!--双向数据绑定-->
	
	<ul>
		<li v-for="(i,k) in list">{{i}}---{{k}}</li>	<!--循环遍历对象-->
	</ul>
	
	<button @click="a">btn</button>			<!--应用函数 要传值得加（）-->

</div>


js：

new Vue({
	el:"#app",					//绑定到视图
	data:{						//定义数据
		message:"数据"，
		list:["数","组"]
	}，
	methods:{					//定义方法
		a(){
			alert("方法")
		}
	}

})



npm install vue
v-text							绑定文本




v-html							解析html字符串
<input type="text" v-bind:value/>			绑定属性 可以简写为  :属性名


this.数据名						改动数据
@click($event) 						获取事件对象 传值
function(e){
	e.srcElement.dataset.				
}


{{加减乘除 函数 三目运算等等 但要返回值}}		vue表达式 
computed{	//比watch效率更高，如搜索提示					计算属性
	c:function(val){
		//返回计算后的值
		return 3*val+5;
	}
}						

obj.bind(this)						改变指针指向
_that=this

watch:{							监听数据
	message:function(newval,oldval){
		return val;
	}
}

:class="{red:x==y}"
:style="{}"

v-if=""v-else						显示隐藏
v-show
v-hide

filter:{						过滤器
	reverse:function(val,can1,can2,can3){
		return val+can1+can2*can3;
	}
}
{{123123|reverse(1,2,3)}}

							$http   请求

axios.min.js  运用广泛，普遍在用
axios.get().then().then()
用法在github

vue-resource
this.$http.get().then(fn).rephonse()
用法在github
		

